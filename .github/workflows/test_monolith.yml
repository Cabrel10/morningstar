name: Monolith Model Tests

on:
  push:
    branches: [ main, master, develop, feature/monolith ]
    paths:
      - 'ultimate/model/monolith_model.py'
      - 'ultimate/inference/inference_monolith.py'
      - 'ultimate/tests/test_monolith_model.py'
      - 'ultimate/tests/test_inference_monolith.py'
      - '.github/workflows/test_monolith.yml'
      - 'Dockerfile'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'ultimate/model/monolith_model.py'
      - 'ultimate/inference/inference_monolith.py'
      - 'ultimate/tests/test_monolith_model.py'
      - 'ultimate/tests/test_inference_monolith.py'
      - 'Dockerfile'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tensorflow numpy pandas matplotlib pytest pytest-cov flake8 black
        pip install -e .

    - name: Run linting (Flake8 and Black)
      run: |
        # Vérifier le formatage avec Black
        black --check ultimate/model/ ultimate/inference/ --diff
        # Vérifier la qualité du code avec Flake8
        flake8 ultimate/model/ ultimate/inference/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests for monolith model
      run: |
        # Exécuter les tests du modèle monolithique avec couverture
        pytest -xvs ultimate/tests/test_monolith_model.py ultimate/tests/test_inference_monolith.py --cov=ultimate/model --cov=ultimate/inference --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: monolith
        name: codecov-monolith
        fail_ci_if_error: false
        verbose: true

    - name: Create coverage badge
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage-badge.svg -f
        
  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Dockerfile lint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: morningstar-monolith:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm morningstar-monolith:latest python -c "from ultimate.model.monolith_model import MonolithModel; print('Docker test successful')" 